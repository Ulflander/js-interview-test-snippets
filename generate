#!/usr/bin/env node

const   DEFAULT_NUM = 10,
        DEFAULT_NAME = 'John Doe',
        SNIPPETS_FOLDER = './snippets/',
        DIST_FOLDER = './tests/',
        TEST_HEADER = '// Hi %s!\n' +
                '// \n' +
                '// This test contains %d code snippets.\n' +
                '// For each of this snippet, you have one or more question to answer.\n' +
                '// One or many answer may apply to the questions.\n' +
                '// \n' +
                '// Good luck, and have fun! :)\n\n\n',
        TEST_FOOTER = '\n' +
                '// Test generated on %s for candidate %s.\n',
        SNIPPET_HEADER = '// -----------------------------------\n' +
                '// Snippet #%d\n',
        SNIPPET_FOOTER = '\n\n\n',

        argv = require('yargs').argv,
        urlize = require('urlize').urlize,
        util = require('util'),
        fs = require('fs'),
        path = require('path');

function addLeadingZero (n) {
    return n < 10 ? '0' + n : String(n);
}

function getDate() {
    let d = new Date();
    return util.format('%d-%s-%s',
                d.getFullYear(),
                addLeadingZero(d.getMonth() + 1),
                addLeadingZero(d.getDate()));
}

async function getSnippetsList () {
    return new Promise(function (resolve, reject) {
        fs.readdir(SNIPPETS_FOLDER, (err, files) => {
            if (!!err) {
                reject(err);
            } else {
                resolve(files.filter(file => file !== '.DS_Store'));
            }
        })
    });
}

async function getSnippetContent (filename) {
    return new Promise(function (resolve, reject) {
        fs.readFile(path.join(SNIPPETS_FOLDER, filename), function (err, content) {

            if (!!err) {
                reject(err);
            } else {
                resolve(content.toString().trim());
            }
        });
    });
}

async function buildAndWriteTest (requiredPath, snippets, candidateName) {
    let date = getDate(),
        testContent;

    snippets = snippets.map((snippet, index) => util.format(SNIPPET_HEADER, index + 1) + snippet + SNIPPET_FOOTER);

    testContent = util.format(TEST_HEADER, candidateName, snippets.length) +
            snippets.join('') +
            util.format(TEST_FOOTER, date, candidateName)

    return new Promise(function (resolve, reject) {
        let filepath = path.join(requiredPath, util.format('%s-%s.js', date, urlize(candidateName)));

        fs.writeFile(filepath, testContent, function (err) {
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

async function main() {

    let snippets,
        snippetsCount,

        // Set defaults
        num = DEFAULT_NUM,
        candidateName = DEFAULT_NAME,
        requiredPath = DIST_FOLDER;

    // Load list
    try {
        snippets = await getSnippetsList();
        snippetsCount = snippets.length;
    } catch (e) {
        console.log('Error while generating test:');
        console.error(e);
        return;
    }

    // Get custom parameters
    if (argv.hasOwnProperty('num') && typeof argv.num === 'number') {
        // Avoid trying to generate a test with more snippets than we actually have
        num = Math.min(snippetsCount, Math.floor(argv.num));
    }
    if (argv.hasOwnProperty('name') && typeof argv.name === 'string') {
        candidateName = argv.name;
    }
    if (argv.hasOwnProperty('path') && typeof argv.path === 'string') {
        requiredPath = argv.path;
    }

    console.log(util.format('Building test using %d snippets...', num));

    while (snippets.length > num) {
        snippets.splice(Math.floor(Math.random() * snippetsCount), 1);
        snippetsCount -= 1;
    }

    try {
        snippets = await Promise.all(snippets.map(async (filename) => await getSnippetContent(filename)));
        await buildAndWriteTest(requiredPath, snippets, candidateName);
    } catch (e) {
        console.log('Error while generating test:');
        console.error(e);
        return;
    }

    console.log('All done');
}

main();
